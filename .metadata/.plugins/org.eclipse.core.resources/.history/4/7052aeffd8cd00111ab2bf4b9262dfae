package code;

import java.util.ArrayList;
import java.util.Scanner;
import java.util.Set;
import java.util.TreeSet;

public class SetMedian {
	public static void main(String[] args) {

		// helpers for input/output
		Scanner in = new Scanner(System.in);
		int N;
		N = in.nextInt();

		String s[] = new String[N];
		int x[] = new int[N];
		for (int i = 0; i < N; i++) {
			s[i] = in.next();
			x[i] = in.nextInt();
		}

		Set<Integer> set = new TreeSet<Integer>();
		Median m = new Median();
		for (int i = 0; i < N; i++) {
			if (s[i].equals("a")) {
				set.add(x[i]);
				// Call median
				m.findMedian(set);
			} else {
				if (!set.contains(x[i]))
					System.out.println("Wrong!");
				else {
					list.remove(new Integer(x[i]));
					// call median
					if (list.isEmpty())
						System.out.println("Wrong!");
					else
						m.findMedian(list);
				}
			}
		}

	}

	// Function to find the median in the list
	public void findMedian(TreeSet<Integer> set) {
		int p = 0, r = set.size() - 1;
		if (set.size() % 2 == 1) {
			// Odd length
			int medPos = p + (r - p) / 2;
			int i = 0, medianElmt;
			for (Integer elmt : set) {
				if (i == medPos) {
					medianElmt = elmt;
					break;
				}
				i++;
			}

			System.out.println(medianElmt);
		} else {
			// Even length medians
			int m1 = (list.size()) / 2;
			int m2 = m1 + 1;
			int medianElmt1 = findNthElmt(list, p, r, m1 - 1);
			int medianElmt2 = findNthElmt(list, p, r, m2 - 1);
			double medianElmt = (double) (medianElmt1 + medianElmt2) / 2;
			System.out.println(medianElmt);
		}
	}
}
