package code.ds;

import java.util.Iterator;

/**
 * Implementation of stacks using Linked List. It will take more space. In java
 * space used will be ~~40N bytes for stack of N elements. It is also slow
 * because of pointer manipulations for every push and pop operation
 * 
 * @author Dhass
 * 
 */

public class StackLL<T> implements Iterable<T>{
	class Node {
		T item;
		Node next;
	}

	private Node first = null;

	public boolean isEmpty() {
		return first == null;
	}

	public void push(T item) {
		Node newElmt = new Node();
		newElmt.item = item;
		newElmt.next = first;
		first = newElmt;
	}

	public T pop() throws Exception {
		if (isEmpty())
			throw new Exception("Stack Empty");
		T item = first.item;
		first = first.next;
		return item;
	}

	public Iterator<T> iterator(){
		return new ListIterator();
	}
	
	private class listIterator<T>{
		
	}
}



class StackLLTest {
	/**
	 * Testing StackLL
	 * 
	 * @param args
	 * @throws Exception
	 */
	public static void main(String[] args) throws Exception {
		StackLL<Integer> s = new StackLL<>();
		s.push(1);
		System.out.println(s.pop());
	}
}