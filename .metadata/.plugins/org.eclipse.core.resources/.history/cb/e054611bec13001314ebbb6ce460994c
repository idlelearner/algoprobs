package code;

import java.util.LinkedList;
import java.util.Queue;

/**
 * Print the nodes all the nodes at distance K
 * from the root node
 * @author Dhass
 *
 */
public class PrintNodesAtDistanceK {

	BinaryTree b;
	public static void main(String[] args) {

		PrintNodesAtDistanceK a = new PrintNodesAtDistanceK();
		int arr[] = { 1, 2, 3, 4, 5, 6, 7 };
		a.b = a.createTree(arr, 0, arr.length - 1);

		int val = 5;
		int k = 4;
		printNodeVal(a.b, val, k);
	}

	public BinaryTree createTree(int a[], int low, int high) {
		if (low <= high) {
			int mid = (low + high) / 2;
			BinaryTree root = new BinaryTree(a[mid]);
			root.left = createTree(a, low, mid - 1);
			root.right = createTree(a, mid + 1, high);
			return root;
		} else
			return null;
	}

	// print all nodes at distance k from node val
	public static Integer printNodeVal(BinaryTree root, int val, int k) {
		if (root == null)
			return Integer.MIN_VALUE;

		// checking the root first to avoid traversal of left & right sub tree
		if (root.data == val) {
			printNodesAtLevelK(root.left, k - 1);
			printNodesAtLevelK(root.right, k - 1);
			return k - 1;
		}

		// checking the left tree for element val
		Integer l = printNodeVal(root.left, val, k);
		if (l == 0) {
			root.print();
			return Integer.MIN_VALUE;
		} else if (l != Integer.MIN_VALUE) {
			printNodesAtLevelK(root.right, l - 1);
			return l - 1;
		}

		// checking the right tree for element val
		Integer r = printNodeVal(root.right, val, k);
		if (r == 0) {
			root.print();
			return Integer.MIN_VALUE;
		} else if (r != Integer.MIN_VALUE) {
			printNodesAtLevelK(root.left, r - 1);
			return r - 1;
		}

		return Integer.MIN_VALUE;
	}

	// Level order traversal to print subtree elements at a given level
	private static void printNodesAtLevelK(BinaryTree root, int level) {
		if (root == null)
			return;

		Queue<BinaryTree> q = new LinkedList<BinaryTree>();
		q.add(root);
		q.add(null); // used to mark the end of current level

		while (!q.isEmpty()) {
			BinaryTree tmp = q.remove();
			if (tmp == null) {
				level--;
				if (!q.isEmpty()) // add new level only if queue is not empty
					q.add(null);
			} else {
				if (level == 0)
					tmp.print();
				else if (level < 0)
					break;

				if (tmp.left != null) // enqueue left child
					q.add(tmp.left);

				if (tmp.right != null) // enqueue right child
					q.add(tmp.right);
			}
		}
	}
}
