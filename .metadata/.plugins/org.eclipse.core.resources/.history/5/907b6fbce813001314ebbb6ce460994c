package code;

/**
 * Binary search tree implementation
 * @author Dhass
 *
 */
public class BST {
	BinaryTree root = new BinaryTree(2);

	public static void main(String[] args) {
		BST b = new BST();
		b.construct();
		b.inOrderTraversal(b.root);
		b.delete(b.root, 6);
		System.out.println();
		b.inOrderTraversal(b.root);
		b.delete(b.root, 1);
		System.out.println();
		b.inOrderTraversal(b.root);
	}

	BinaryTree construct() {
		int a[] = { 4, 5, 6, 1, 3 };
		for (int i = 0; i < a.length; i++)
			root = insert(root, a[i]);
		return root;
	}

	BinaryTree insert(BinaryTree root, int elmt) {
		if (root == null) {
			BinaryTree n = new BinaryTree(elmt);
			return n;
		} else {
			if (root.data > elmt)
				root.setLeft(insert(root.getLeft(), elmt));
			else
				root.setRight(insert(root.getRight(), elmt));
		}
		return root;
	}

	BinaryTree delete(BinaryTree root, int elmt) {
		if (root == null)
			System.out.println("Elmt not present");
		else if (root.data > elmt)
			root.left = delete(root.left, elmt);
		else if (root.data < elmt)
			root.right = delete(root.right, elmt);
		else {
			if (root.left != null && root.right != null) {
				BinaryTree temp = findMax(root.left);
				root.data = temp.data;
				root.left = delete(root.left, temp.data);
			} else if (root.left == null && root.right == null)
				root = null;
			else if (root.left != null || root.right != null) {
				if (root.left == null)
					root = root.right;
				else
					root = root.left;
			}
		}
		return root;
	}

	BinaryTree findMax(BinaryTree root) {
		BinaryTree max = null;
		while (root != null) {
			max = root;
			root = root.right;
		}
		return max;
	}

	public void inOrderTraversal(BinaryTree root) {
		if (root != null) {
			inOrderTraversal(root.left);
			System.out.print(root.getData() + " ");
			inOrderTraversal(root.right);
		}
	}
}
